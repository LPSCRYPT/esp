/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DiamondLoupeFacet, DiamondLoupeFacetInterface } from "../DiamondLoupeFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "_facetFunctionSelectors",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d87806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100fa578063adfca15e1461010f578063cdffacc61461012f57600080fd5b806301ffc9a71461006c57806352ef6b2c146100e5575b600080fd5b6100d061007a366004610a7c565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100ed6101b8565b6040516100dc9190610ac5565b6101026103cd565b6040516100dc9190610b7c565b61012261011d366004610c24565b6108bb565b6040516100dc9190610c5a565b61019361013d366004610a7c565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604090205460601c90565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100dc565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9061ffff1667ffffffffffffffff81111561021b5761021b610c6d565b604051908082528060200260200182016040528015610244578160200160208202803683370190505b50915060008060005b600384015461ffff168210156103c5576000818152600285016020526040812054905b60088110156103b0578361028381610ccb565b600388015490955061ffff16851190506103b057600581901b82901b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020889052604081205460601c90805b88811015610346578a81815181106102f1576102f1610d03565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036103345760019150610346565b8061033e81610ccb565b9150506102d7565b5080156103555750505061039e565b818a898151811061036857610368610d03565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528761039781610ccb565b9850505050505b806103a881610ccb565b915050610270565b505080806103bd90610ccb565b91505061024d565b505082525090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9061ffff1667ffffffffffffffff81111561043057610430610c6d565b60405190808252806020026020018201604052801561047657816020015b60408051808201909152600081526060602082015281526020019060019003908161044e5790505b50600382015490925060009061ffff1667ffffffffffffffff81111561049e5761049e610c6d565b6040519080825280602002602001820160405280156104c7578160200160208202803683370190505b50905060008060005b600385015461ffff16821015610849576000818152600286016020526040812054905b6008811015610834578361050681610ccb565b600389015490955061ffff168511905061083457600581901b82901b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020899052604081205460601c90805b888110156106bb578273ffffffffffffffffffffffffffffffffffffffff168c828151811061058b5761058b610d03565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16036106a957838c82815181106105c5576105c5610d03565b6020026020010151602001518b83815181106105e3576105e3610d03565b602002602001015160ff16815181106105fe576105fe610d03565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a828151811061065e5761065e610d03565b602002602001015160ff161061067357600080fd5b89818151811061068557610685610d03565b60200260200101805180919061069a90610d32565b60ff16905250600191506106bb565b806106b381610ccb565b91505061055a565b5080156106ca57505050610822565b818b89815181106106dd576106dd610d03565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff909116905260038a015461ffff1667ffffffffffffffff81111561072357610723610c6d565b60405190808252806020026020018201604052801561074c578160200160208202803683370190505b508b898151811061075f5761075f610d03565b602002602001015160200181905250828b898151811061078157610781610d03565b60200260200101516020015160008151811061079f5761079f610d03565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060018989815181106107ff576107ff610d03565b60ff909216602092830291909101909101528761081b81610ccb565b9850505050505b8061082c81610ccb565b9150506104f3565b5050808061084190610ccb565b9150506104d0565b5060005b828110156108b057600084828151811061086957610869610d03565b602002602001015160ff169050600087838151811061088a5761088a610d03565b6020026020010151602001519050818152505080806108a890610ccb565b91505061084d565b508185525050505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9060009061ffff1667ffffffffffffffff81111561092157610921610c6d565b60405190808252806020026020018201604052801561094a578160200160208202803683370190505b5092506000805b600384015461ffff16821015610a72576000818152600285016020526040812054905b6008811015610a5d578361098781610ccb565b600388015490955061ffff1685119050610a5d57600581901b82901b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020889052604090205460601c73ffffffffffffffffffffffffffffffffffffffff8a16819003610a485781898881518110610a0957610a09610d03565b7fffffffff000000000000000000000000000000000000000000000000000000009092166020928302919091019091015286610a4481610ccb565b9750505b50508080610a5590610ccb565b915050610974565b50508080610a6a90610ccb565b915050610951565b5050825250919050565b600060208284031215610a8e57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610abe57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610b1357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610ae1565b50909695505050505050565b600081518084526020808501945080840160005b83811015610b715781517fffffffff000000000000000000000000000000000000000000000000000000001687529582019590820190600101610b33565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610c16578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff168452870151878401879052610c0387850182610b1f565b9588019593505090860190600101610ba3565b509098975050505050505050565b600060208284031215610c3657600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610abe57600080fd5b602081526000610abe6020830184610b1f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cfc57610cfc610c9c565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff821660ff8103610d4857610d48610c9c565b6001019291505056fea2646970667358221220247e6ab48ecdf9ed262a8e1c3fb2b435041d7978798acbfb549255c4445cc4f764736f6c634300080d0033";

type DiamondLoupeFacetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: DiamondLoupeFacetConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class DiamondLoupeFacet__factory extends ContractFactory {
  constructor(...args: DiamondLoupeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "DiamondLoupeFacet";
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<DiamondLoupeFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondLoupeFacet>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondLoupeFacet {
    return super.attach(address) as DiamondLoupeFacet;
  }
  connect(signer: Signer): DiamondLoupeFacet__factory {
    return super.connect(signer) as DiamondLoupeFacet__factory;
  }
  static readonly contractName: "DiamondLoupeFacet";
  public readonly contractName: "DiamondLoupeFacet";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondLoupeFacetInterface {
    return new utils.Interface(_abi) as DiamondLoupeFacetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DiamondLoupeFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondLoupeFacet;
  }
}
